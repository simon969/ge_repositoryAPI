// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ge_repository.Models;

namespace ge_repository.Migrations
{
    [DbContext(typeof(ge_DbContext))]
    partial class ge_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ge_repository.Models.ge_data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<int>("cstatus");

                    b.Property<int>("datumProjection");

                    b.Property<string>("description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<DateTime>("filedate");

                    b.Property<string>("fileext")
                        .HasMaxLength(4);

                    b.Property<string>("filename");

                    b.Property<long>("filesize");

                    b.Property<string>("filetype")
                        .HasMaxLength(64);

                    b.Property<string>("folder")
                        .HasMaxLength(255);

                    b.Property<string>("keywords")
                        .HasMaxLength(255);

                    b.Property<string>("locAddress")
                        .HasMaxLength(255);

                    b.Property<double?>("locEast");

                    b.Property<double?>("locHeight");

                    b.Property<double?>("locLatitude");

                    b.Property<double?>("locLevel");

                    b.Property<double?>("locLongitude");

                    b.Property<string>("locMapReference")
                        .HasMaxLength(255);

                    b.Property<string>("locName")
                        .HasMaxLength(255);

                    b.Property<double?>("locNorth");

                    b.Property<string>("locPostcode")
                        .HasMaxLength(255);

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<Guid>("projectId");

                    b.Property<int>("pstatus");

                    b.Property<int>("qstatus");

                    b.Property<string>("version")
                        .HasMaxLength(255);

                    b.Property<int>("vstatus");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("editedId");

                    b.HasIndex("projectId");

                    b.ToTable("ge_data");
                });

            modelBuilder.Entity("ge_repository.Models.ge_data_big", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<byte[]>("data_binary");

                    b.Property<string>("data_string");

                    b.Property<string>("data_xml");

                    b.HasKey("Id");

                    b.ToTable("ge_data");
                });

            modelBuilder.Entity("ge_repository.Models.ge_event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<int>("level");

                    b.Property<string>("message");

                    b.Property<string>("returnUrl");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.ToTable("ge_event");
                });

            modelBuilder.Entity("ge_repository.Models.ge_office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<int>("datumProjection");

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<string>("folder")
                        .HasMaxLength(255);

                    b.Property<string>("locAddress")
                        .HasMaxLength(255);

                    b.Property<double?>("locEast");

                    b.Property<double?>("locHeight");

                    b.Property<double?>("locLatitude");

                    b.Property<double?>("locLevel");

                    b.Property<double?>("locLongitude");

                    b.Property<string>("locMapReference")
                        .HasMaxLength(255);

                    b.Property<string>("locName")
                        .HasMaxLength(255);

                    b.Property<double?>("locNorth");

                    b.Property<string>("locPostcode")
                        .HasMaxLength(255);

                    b.Property<string>("managerId")
                        .HasMaxLength(450);

                    b.Property<string>("name")
                        .HasMaxLength(255);

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<string>("project_operations")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("editedId");

                    b.HasIndex("managerId");

                    b.ToTable("ge_office");
                });

            modelBuilder.Entity("ge_repository.Models.ge_office_user", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<Guid>("officeId");

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<string>("userId");

                    b.Property<string>("user_operations");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("editedId");

                    b.HasIndex("officeId");

                    b.HasIndex("userId", "officeId")
                        .IsUnique()
                        .HasFilter("[userId] IS NOT NULL");

                    b.ToTable("ge_office_user");
                });

            modelBuilder.Entity("ge_repository.Models.ge_project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<int>("cstatus");

                    b.Property<string>("data_operations")
                        .HasMaxLength(255);

                    b.Property<int>("datumProjection");

                    b.Property<string>("description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<DateTime?>("end_date");

                    b.Property<string>("folder")
                        .HasMaxLength(255);

                    b.Property<string>("keywords")
                        .HasMaxLength(255);

                    b.Property<string>("locAddress")
                        .HasMaxLength(255);

                    b.Property<double?>("locEast");

                    b.Property<double?>("locHeight");

                    b.Property<double?>("locLatitude");

                    b.Property<double?>("locLevel");

                    b.Property<double?>("locLongitude");

                    b.Property<string>("locMapReference")
                        .HasMaxLength(255);

                    b.Property<string>("locName")
                        .HasMaxLength(255);

                    b.Property<double?>("locNorth");

                    b.Property<string>("locPostcode")
                        .HasMaxLength(255);

                    b.Property<string>("managerId")
                        .HasMaxLength(450);

                    b.Property<string>("name")
                        .HasMaxLength(255);

                    b.Property<Guid>("officeId");

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<int>("pstatus");

                    b.Property<DateTime>("start_date");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("editedId");

                    b.HasIndex("managerId");

                    b.HasIndex("officeId");

                    b.ToTable("ge_project");
                });

            modelBuilder.Entity("ge_repository.Models.ge_project_user", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<Guid>("projectId");

                    b.Property<string>("userId");

                    b.Property<string>("user_operations");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("editedId");

                    b.HasIndex("projectId");

                    b.HasIndex("userId", "projectId")
                        .IsUnique()
                        .HasFilter("[userId] IS NOT NULL");

                    b.ToTable("ge_project_user");
                });

            modelBuilder.Entity("ge_repository.Models.ge_transform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdDT");

                    b.Property<string>("createdId");

                    b.Property<Guid?>("dataId");

                    b.Property<string>("description");

                    b.Property<DateTime?>("editedDT");

                    b.Property<string>("editedId");

                    b.Property<string>("name");

                    b.Property<string>("operations")
                        .HasMaxLength(255);

                    b.Property<Guid?>("projectId");

                    b.Property<Guid?>("styleId");

                    b.HasKey("Id");

                    b.HasIndex("createdId");

                    b.HasIndex("dataId");

                    b.HasIndex("editedId");

                    b.HasIndex("projectId");

                    b.HasIndex("styleId");

                    b.ToTable("ge_transform");
                });

            modelBuilder.Entity("ge_repository.Models.ge_user", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastLoggedIn");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ge_repository.Models.ge_data", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_project", "project")
                        .WithMany("data")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ge_repository.Models.ge_data_big", b =>
                {
                    b.HasOne("ge_repository.Models.ge_data", "data")
                        .WithOne("data")
                        .HasForeignKey("ge_repository.Models.ge_data_big", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ge_repository.Models.ge_event", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");
                });

            modelBuilder.Entity("ge_repository.Models.ge_office", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_user", "manager")
                        .WithMany()
                        .HasForeignKey("managerId");
                });

            modelBuilder.Entity("ge_repository.Models.ge_office_user", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_office", "office")
                        .WithMany("users")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ge_repository.Models.ge_user", "user")
                        .WithMany("offices")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("ge_repository.Models.ge_project", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_user", "manager")
                        .WithMany()
                        .HasForeignKey("managerId");

                    b.HasOne("ge_repository.Models.ge_office", "office")
                        .WithMany("projects")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ge_repository.Models.ge_project_user", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_project", "project")
                        .WithMany("users")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ge_repository.Models.ge_user", "user")
                        .WithMany("projects")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("ge_repository.Models.ge_transform", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user", "created")
                        .WithMany()
                        .HasForeignKey("createdId");

                    b.HasOne("ge_repository.Models.ge_data", "data")
                        .WithMany()
                        .HasForeignKey("dataId");

                    b.HasOne("ge_repository.Models.ge_user", "edited")
                        .WithMany()
                        .HasForeignKey("editedId");

                    b.HasOne("ge_repository.Models.ge_project", "project")
                        .WithMany("transform")
                        .HasForeignKey("projectId");

                    b.HasOne("ge_repository.Models.ge_data", "style")
                        .WithMany()
                        .HasForeignKey("styleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ge_repository.Models.ge_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ge_repository.Models.ge_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
